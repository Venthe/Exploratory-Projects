# This file uses the version 3 docker-compose file format, described here:
# https://docs.docker.com/compose/compose-file/compose-file-v3/

# Versioning (And supported functions) can be found here:
# https://docs.docker.com/compose/compose-file/compose-versioning/#version-3
version: "3.8"
services:
  from_dockerfile:
    # Optional; When used in conjunction with Build,
    #   will automatically tag image
    image: "docker.io/venthe/test-tag:1.0.0"
    build:
      # Build the specified stage as defined inside the Dockerfile.
      # See the multi-stage build docs for details.
      target: prod
      # A list of images that the engine uses for cache resolution.
      cache_from:
        - "scratch"
      context: "./build-context"
      # Defaults to Dockerfile
      dockerfile: "Dockerfile"
      # Add metadata to the resulting image using Docker labels.
      # You can use either an array or a dictionary.
      # It’s recommended that you use reverse-DNS notation to prevent
      #   your labels from conflicting with those used by other software.
      labels:
        - "com.example.description=Accounting webapp"
        - "com.example.department=Finance"
        - "com.example.label-with-empty-value"
      # Set the network containers connect to for the RUN instructions during build.
      # [host, none, custom_network_1]
      network: none
      # Args accept both mapping and list form; like so:
      # build_number: 1
      # - build_number=1
      args:
        build_number: 1
        # You can omit the value when specifying a build argument,
        #   in which case its value atbuild time is the value in the
        #   environment where Compose is running.
        pwd:
        # YAML boolean values ("true", "false", "yes", "no", "on", "off")
        #   must be enclosed in quotes, so that the parser interprets them
        #   as strings.
        test: "true"
      # Set the size of the /dev/shm partition for this build’s containers.
      # Specify as an integer value representing the number of bytes or as
      #   a string expressing a byte value.
      # shm is a 'temp partition'
      shm_size: "2gb"
    # Specify an optional parent cgroup for the container.
    #   cgroups (abbreviated from control groups) is a Linux kernel feature
    #   that limits, accounts for, and isolates the resource usage
    #   (CPU, memory, disk I/O, network, etc.) of a collection of processes.
    cgroup_parent: 'm-executor-abcd'
    # Add or drop container capabilities. See `man 7 capabilities` for a full list.
    cap_add:
      - ALL
    cap_drop:
      - NET_ADMIN
      - SYS_ADMIN
    # Override the default command.
    # The command can also be a list, in a manner similar to dockerfile:
    #   command: ["bundle", "exec", "thin", "-p", "3000"]
    command: bundle exec thin -p 3000
    # Grant access to configs on a per-service basis using the per-service
    #   `configs` configuration. Two different syntax variants are supported.
    # The config must already exist or be defined in the top-level `configs`
    #   configuration of this stack file, or stack deployment fails.
    configs:
      # Short syntax
      # The short syntax variant only specifies the config name. This
      #   grants the container access to the config and mounts it at
      # `/<config_name>` within the container. The source name and
      #   destination mountpoint are both set to the config name.
      # The following example uses the short syntax to grant the `redis`
      #   service access to the `my_config` and `my_other_config` configs.
      # The value of `my_config` is set to the contents of the file
      #   `./my_config.txt`, and `my_other_config` is defined as an external
      #   resource, which means that it has already been defined in Docker,
      #   either by running the `docker config create` command or by another
      #   stack deployment. If the external config does not exist, the stack
      #   deployment fails with a `config not found` error.
      - my_other_config
      # The long syntax provides more granularity in how the config is
      #   created within the service’s task containers.
      # * `source`: The name of the config as it exists in Docker.
      # * `target`: The path and name of the file to be mounted in the
      #   service’s task containers. Defaults to `/<source>` if not specified.
      # * `uid` and `gid`: The numeric UID or GID that owns the mounted
      #   config file within in the service’s task containers. Both default
      #   to `0` on Linux if not specified. Not supported on Windows.
      # * `mode`: The permissions for the file that is mounted within the
      #   service’s task containers, in octal notation. For instance, `0444`
      #   represents world-readable. The default is `0444`. Configs cannot be
      #   writable because they are mounted in a temporary filesystem, so if you
      #   set the writable bit, it is ignored. The executable bit can be set. If
      #   you aren’t familiar with UNIX file permission modes, you may find this
      #   [permissions calculator](http://permissions-calculator.org/) useful.
      # The following example sets the name of `my_config` to `redis_config`
      #   within the container, sets the mode to `0440` (group-readable) and sets
      #   the user and group to `103`. The `redis` service does not have access
      #   to the `my_other_config` config.
      - source: my_config
        target: /redis_config
        uid: '103'
        gid: '103'
        mode: 0440
    # Specify a custom container name, rather than a generated default name.
    #   Because Docker container names must be unique, you cannot scale a service
    #   beyond 1 container if you have specified a custom name. Attempting to do
    #   so results in an error.
    container_name: my-web-container



networks: {}
volumes:
  # Anchor: &default-volume
  db-data: &default-volume
    driver: default
    name: "test"
  # Uasge of alias *default-volume
  metrics: *default-volume
  # It is also possible to partially override values set by anchor reference
  #   using the [YAML merge type](http://yaml.org/type/merge.html).
  # In following example, `metrics` volume specification uses alias to avoid
  #   repetition but override `name` attribute
  example:
    <<: *default-volume
    name: "example"
# See configs in `from_dockerfile` service
configs:
  my_config:
    file: ./my_config.txt
  my_other_config:
    external: true
secrets: {}
